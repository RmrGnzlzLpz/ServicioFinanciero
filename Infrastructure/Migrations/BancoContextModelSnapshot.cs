// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(BancoContext))]
    partial class BancoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.FinancialService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("financial_services");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FinancialService");
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FinancialServiceId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinancialServiceId");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("Domain.Entities.CheckingAccount", b =>
                {
                    b.HasBaseType("Domain.Entities.FinancialService");

                    b.HasDiscriminator().HasValue("CheckingAccount");
                });

            modelBuilder.Entity("Domain.Entities.CreditCard", b =>
                {
                    b.HasBaseType("Domain.Entities.FinancialService");

                    b.HasDiscriminator().HasValue("CreditCard");
                });

            modelBuilder.Entity("Domain.Entities.SavingsAccount", b =>
                {
                    b.HasBaseType("Domain.Entities.FinancialService");

                    b.HasDiscriminator().HasValue("SavingsAccount");
                });

            modelBuilder.Entity("Domain.Entities.Tdc", b =>
                {
                    b.HasBaseType("Domain.Entities.FinancialService");

                    b.Property<double>("AnnualInterestRate")
                        .HasColumnType("float");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Tdc");
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Domain.Entities.FinancialService", null)
                        .WithMany("Transactions")
                        .HasForeignKey("FinancialServiceId");
                });
#pragma warning restore 612, 618
        }
    }
}
